CTRL+SHIFT+T=open type - поиск нужного класса, навести курсор на класс и нажать CTRL+T чтобы увидеть что использует класс
CTRL+O=open methods - нажать в классе, чтобы увидеть какие он имеет методы

Debug - жук
F6 - вперед на шаг
F8 - до следующего breakpoint 

CTRL+SHIFT+I - выделить метод и узнать результат его выполения, тоже самое и с условиями (пример (i<5))
CTRL - навести на класс или переменную и можно увидеть, где объявляется

ALT+SHIFT+R - Rename переменные, классы и тд
ALT+SHIFT+T - extract variable/method 
ALT+SHIFT+S - автоматический конструктор Геттеры / Сеттеры

heap-> include object
stack-> include methods+local variable, preference
metaspace-> include classes, static data

Инкапсуляция - возможность разделить код на модули (классы), и скрыть определенные свойства
Наследование
над любым самым высшим классом есть класс Object, от которого наследуются такие методы как ToString, equals и тд.
у каждого класса 1 наследник
Полиморфизм -


finalaize - метод, который мы не вызываем, но его вызывает гарбич коллектор, чтобы удалить мусор

this - указывает на переменную, если они одинаковые
super -  указатель на самый высший класс

В intarface могут быть только константы и абстрактные методы

ЧИТАТЬ ПРО АНОНИМНЫЕ КЛАССЫ

Аннотации и Generics
часто встречаемые 
@Deprecated
@Override
@SupressWarnings например не используемая переменная

аннотация 
@Retention
RetentionPilicy.SOURCE - аннотация которая используется на этапе компиляции, потом дел
RetentionPilicy.RUNTIME - доступна во время выполнения
RetentionPilicy.CLASS - записываются в класс, но потом не используются

Wildcards (?) - collection <?> - в коллекции можно пихать все что угодно благодаря знаку вопрос
Wildcards (bounded, extends)
List<? extends Shape> - принимает всех наследников и сам Shape

КОЛЛЕКЦИИ
_____________________________
List<E>
-индексы, как у массивов
-дубликаты могут быть

ArrayList<E>-тот же массив но без размера
Класс LinkedList<E> - двухсвязный список (быстрое добавление удаление, но медленно ищет по индексу)

Интерфес Map<K,V>

Интерфейс Set<E>
не имеет дубликатов и индексов

Интерфейс Iterator
Очередь интерфейс Queue - хранилище элементов для обработки
FIFO, FILO 


ИСКЛЮЧЕНИЯ - это объект
____________________________
генерируются - исполнительной системой и вручную
иерархия исключений - object (во главе) -> throwable -> error
										  			 -> exception
Класс error - коитические ошибки, которые кидаются самой JVM
Unchecked exception - runtime exception, error
Checked - которые требуют обработки

Правила 
1) если можно загулушить - глушим ( при этом метод выполнит задачу), если нет пробрасываем дальше через throws

Ошибки обработки исклюяений:
1)кидаются конкретные исклюяения, не обобщенные (нельзя throws exception, runtimeexception, throwexception)
ловятся также только конкретные
2)перехват логированием 
3)нельзя логировать и кидать одновременно
4)программа это много потоков. если исключение долетает до верха, поток падает, но программа нет. нельзя исключением прерывать (управлять) поток
5)нельзя обработать само исключение и забыть про его причину
6)стараться не ходить к более обобщенному исключению от конкретного
7)не нужно делать лишних действий над исключениями

ПОТОКИ ввода-вывода
___________________________________
stream -поток для работы с байтами
-InputStrem (read, считывание)
--FileInputStream
--ByteArray..
--Filter...
---Buffered...
---Data...
--Object
-OutputStream

Reader\Wraiter - с символами (в них встроена операция конверсии (кодировка))

Потоки всегда нужно закрывать close();

BufferedReader br = new BufferedReader(reader) //паттерн-декоратор, который используется в java.io - обертка

Serializable
Сериализация - сохранение состояния объекта в последовательность байт
Десериализация - восстановление объекта из этих байт

если нужно сериализировать объект, нужно прописать implements Serializable

ПОТОКИ
____________________________
у каждого потока свой стек
 Thread currentThread = Thread.currentThread(); //получение текущего потока
 главный поток
 при старте
 порождает дочерние
 порождается через thread
 
СВОЙСТВА потока - нельзя менять
id
name
daemon - поток, кторый автоматич завершает работу когда не остается ни одного потока не демона (обычного потока)
priority
  
volatile - свойство отключило локальный кеш, то есть поток работает с памятью напрямую
synchronized - синхронизированный блок кода выполняется только одним потоком

если метод static synchronized, монитор сам класс, если synchronized, но не static- this
разобраться с synchronized, будет в тесте

DEADLOCK - взаимная блокировка
	
ОТРАБОТАТЬ ПРИМЕР RunThread3

Приостановка потока - через метод sleep класса Thread
					- через метод join - ждет пока выполнится другой поток, потом запускает старый
					
Метод Yield  - передает упраление другим потокам

Thread interruption (program+incremenator

Thread.interrupt() - метод, по умолчанию false, после вызова становится true.... Читается методом interrupted() - плюс в том, что не нужно создавать флажок и позволяет разбудить поток

Wait/notify/notifyAll - методы класса Object для управления потоками
notify будит спящий поток в программе
wait останавливает поток 
notifyAll будит все потоки в программе

Executor service:stop thread management pain



Принципы и шаблоны проектирования
_________________________________
UML-язык графического моделирования, состоит из диаграмм case и class

Solid principles - обязательно спрашивают на собесах и их нужно знать...
1-принцип единой отвественности (конкретный класс должен решать конкретную задачу - много методов разбиваются на модули, отдельные классы)
2-принцип открытости/закрытости (программные сущности должны быть открыты для расширения, закрыты для модификации)
выход
пишем интерфейс
имплементимся от него
в основной класс передаем какое-то общее совйство и через него работаем. Получается основной не трогаем,меняем дополнительные
3-результат выполнения кода должен быть предсказуемый
4-принцип разделения интерфейсов (лучше много маленьких, чем один толстый интерфейс и использовать по несколько необходимых маленьких)
5-принцип инверсии зависимостей (модули верхних уровней не должны зависеть от модулей нижних уровней, абстракции не должны зависеть от деталей, детали должны зависеть от абстракций, верхние и нижние модули должны зависеть от абстракций)
базы данных(lv3)-логика(lv2)-интерфес пользователя(lv1) - бд - это верхний уровень

Паттерны проектирования
-шаблоны решения типичных задач
Категории:
-порождающие
-структурные
-поведенческие

JDK8
_______________________________
soft version
v.1.0.6
1- major version
2- minor 
3- patch

Метод foreach переписали, закинули в интерфес Итератор и все интерфесы коллекций имплементили от Итератора

Разница между статик и дефолт методами:
1. Дефолты можно переопределять, статики - нет
2. Статик доступны по имени интерфейса

Лямбда выражение - основная фича 
- специальный синтаксис для определения функциональных объектов, заимствованный из лямбда исчисления. Применяется как правило при объявлении анонимных функций по месту их использования, и обычно допускает ЗАМЫКАНИЕ на лексический контекст, в котором это использовано.
- особый синтаксис, замена анонимным классам, замыканием становится когда ссылается на внешнее лексическое значение

Ссылаться можно только на не final значение

Лямбда выражение
Arrays.asList("a", "b", "d").forEach(e -> System.out.println(e));

Функциональный интерфейс - только с одним методом

Ссылочные методы:оператор
:: - ссылка на метод
Ссылочные методы:
конструктор
static method
method of object
non static method of class ()

Класс Optional
сокращение вложенностей

Stream
parallel stream - работает быстрее, но использовать постоянно нельзя
Нужно использовать если:
-большая коллекция и обработка занимает большое время
-есть проблема производительности и необходимо ее улучшить
-не используются потоки в других местах

parallel stream не решает вопросы синхронизации.

Base64 
стандарт кодирования двоичных данных - на выходе дает случайный набор латинских символов

Repeatable annotation

ИНТЕРНАЦИОНАЛИЗАЦИЯ - i18n - написание программы, работающей в различных языковых окружениях.
локализация - +1 language/region - l10n
______________________________
GMT=0
DST-переход на летнее время

Java Time Zone Updater Tool - отдельно обновляет таймзоны

Класс Locale
идентифицирует используемое языковое окружение

parse- data
format - string

Collator - клас для сравнения строк в замену CompareTo

Обзор XML, XSD
______________________________
-язык разметки, позволяющий в текстовом виде хранить иерархические данные
Применяется
файлы-настроки
мост для обмена данными между программами напис на разных языках
хранение данных - почти аналог БД, но не треб СУБД (эфективно если небольшие объемы)

Составные части XML
пролог - часть до открывающего тега корневого элемента
пространства имен:
xmlns-по умолчанию 
xmlns:xsi
xmlns:jee
xmlns:context
xsi:schemaLocation

<import
<jee:jndi-lookup...
<context:component-scan...

Конфликт имен
<table>
</table>
нужно добавить namespace(пространство имен, префиксы)
<h:table>
</h:table>
 
элементы -
	<book id="bk109">
		<author>Kress, Peter</author>
		<title>Paradox Lost</title>
		<genre>Science Fiction</genre>
		<price>6.95</price>
	</book>
атрибуты - 
комментарии - ctrl+shift+/

HTML->XML

XML-может иметь только один корневой элемент
все элементы должны закрываться
регистр важен
элементы не могут пересекаться
все значения атрибутов должны писаться в кавычки
<>& - нельзя использовать в текстовых блоках (&lt, &gt, &amp - замены)

DTD Doc type definition - описание правил валидации - УСТАРЕЛ

XSD - xml, описывающий структуру других xml - больше возможностей
https://www.freeformatter.com/xsd-generator.html#ad-output - автоматическая генерация XSD

XML Parsers
___________________________
-object Based (DOM) - получаем все xml model in whole +- (+можно обрабатывать элементы повторно, модифицировать)
-Event Based
--Push Parsing (SAX) - просто дергает методы в соотвествии с контентом (+не жрет память при работе с большими XML, -плохой синтаксис,нельзя модифицировать)
--Pull Parsing (StAX) - работает как итератор (-нельзя модифицировать)

Java <-> XML
______________________
marshalling - перегонка явы в xml
unmarshalling

JAXB - Java Architecture XML Binding - для маршалинга, входит в JDK

Xpath 
______________________
- "язык", как sql для бд. Нужен чтобы вытягивать данные из XML

XSL,XSLT
______________________
-расширяемый язык таблиц стилей
XSL include
XSLT - язык трансформации XML документов
XPath - язык навигации по документу
XSL-FO - язык форматирования (аналогия css для html)

XML->txt
html->xml
-исходным должен быть xml и его производные, на выходе все что угодно

JSON
______________________
- для передачи данных база-клиентское приложение
JSON format and JavaScript object ложаться 1:1
Типы данных:
примитивы
-tring
-number
-bool
-null
структурные
-object
-massive

In JAvaScript
a={} - object
b=[] - massive

БД.Язык SQL
______________________
-набор хранящихся упорядочено сведений

СУБД
-софт,для работы с бд

Реляционная БД
множество взаимосвязанных именнованных таблиц, логически связанных между собой.

Ключи
-первичный (primary key)-столбец или совокупность столбцов (как правило столбец с уникальными номерами)
-вторичный ()

create database имя_базы - создание бд

в бд не будет примитивов,т.к. они не могут быть null

Naming
нижний регистр и подчеркивания
все с маленькой буквы

serial-int+autoincrement - колонка id

Нормальные формы
как правило исп первых 3
1. Каждый элемент таблицы должен иметь только одно значение (не список)
2. Выполняется первая норм форма. Вторая требует-не должно быть не ключевых колонок, зависящих только от части ключа, который может быть из двух колонок
3. Выполняется вторая норм форма. Третья требует - не должно быть не ключевых колонок, которые зависят от не ключевых колонок

ДЗ
записать в xml
переписать в бд

SQL-запросы
правая кнопка мыши на базе ->Query Tool 
пишем запрос, нажимаем f5 для выполнения
-- коммент в SQL

Запросы
___________________________
--select * from brand;
--select * from model;
--select * from car;
--insert into brand (name) values ('opel');
--insert into model (name, brand_id) values ('Astra', '4');
--select name,updated from model;
--select * from model where id<6;
--select * from model where id=6;
--select * from model where id=3 or id=4;
--delete from brand;
--delete from brand where id=4;
--update car set vin='astra001' where id=4;
--select m.name from model m;
--select m.name as model_name from model m;
--select count (*) from model;
--select count (1) from model;
--select min(name) from model;
--select distinct name, id from model; 
--select distinct brand_id, name from model; 
--select count (*) model_id from car group by model_id;
--select * from model where name='Atlas' limit 1 offset 0;
--select * from model where name='Atlas' limit 1 offset 1; 
--select * from model order by name asc, id desc;
--select * from model where name like '%la%';
--select * from model where name like '_tlas';
--select *from model where name in ('Atlas', 'Jetta');
--select *from model where name not in ('Atlas', 'Jetta');

Отношения между таблицами
-1к1 - пример таблица с user, отдельная с их password
-1коМногим
-МногиеК1
-МногиеКоМногим - одинаковые двигатели у разных машин и разные двигатели у разных машин (решается добавдение третьей таблицы с колонками ***_id, *****_id)

Шаблон DTO
Data Transfer Object - используется в случае, если одна часть программы должна получить от другой не одно значение, а целый набор.
Шаблон DAO
Data Access Object - DAO???

Язык SQL
Псевдонимы таблиц
-позволяют сократить запись имен таблиц, а также решить пробоему конфликта имен
Ограничение количества строк (пагинация)
чтобы вести часть данных есть слово limit

ORDER by


Логическое связывание таблиц
_____________________________________________
JOIN
--select * from model 
--join brand on (model.brand_id=brand.id);

--select * from model m 
--join brand b on (m.brand_id=b.id);

--update model set brand_id=null where id =5;

--select * from model m 
--left join brand b on (m.brand_id=b.id);

--select * from model m 
--inner join brand b on (m.brand_id=b.id);

--select * from model m 
--right join brand b on (m.brand_id=b.id);

--select * from model m 
--full join brand b on (m.brand_id=b.id);

Stored procedures (хранимые процедуры) - действие (пересчет)

Триггеры - событие в базе (удаление, обновление)

Транзакции
commit
abort
нужно заворачивать свои запросы в транзакции для того, чтобы не пропали данные

Репликации
-одна БД пишет инфу в другую для распределения нагрузки (select в db1, db1->db2)
+держит нагрузки
-время на репликации

Скейлинг
-масштабирование путем увеличения количества серверов (по горизонтали)
-путем увеличения железа (по вертикали)

Sharding
-используется при проблемах с объемами
-база разбивается на осколки
+большие объемы данных
-

JDBC
-стандарт взаимодействия ява-приложения и бд
Является частью Ява и лежит в пакете java.sql
Позволяет:
-соединение
-запросы и получение состояния бд
-обработка рез запросов

Загрузка класса драйвера базы данных

https://jdbc.postgresql.org/download.html

Основные понятия сетевой архитектуры
OSI

5-Presentation-SSL (шифрование), SSH (соединение с удаленной машиной), IMAP, FTP (передача файлов)
4-Session-Sockets-открытое соединение по хосту и порту
3-Network-TCP, UDP

tracert google.com - путь до гугла

Dev tools - прога в браузере, чтобы сомтреть что происходит F12 in Chrome

https - protocol
news.tut.by - hostname
/news/social - pathname(path)
после ? - query parameters   ключ = значение
by - domen
tut - domen 1 level
news - domen 2 level

HTTP methods
-GET
-PUT
-POST-отсылка данных (созд объектов)

У запроса могут быть
Headers
Body
response status - для идентификации результата обработки запроса. Показывает, если смысл разгребать response

1.Request VS 2.Response
1.URL,method 
2.status
header,body - и там и там

Конвертация в Maven project


Введение в Servlet
_________________________________
просто класс который принимает респонс, делает реквест
Servlet API - набор классов
Servlet Container бывают: много, Apache Tomcat and jetty://

HTTP testing tools (install)
rest client - устанавливается с нета для проверки своих сервлетов 
http://localhost:8081
http://localhost:8081/path1

Передаяа данных со страницы (формы)

Передача служебной информации

Введение в JSP
_________________________________
JavaServer Pages - технология, позволяющая легко создавать содержимое веб. Часть технологии J2EE
упрощает работу с сервлетами

Цикл JSP - > трансляция-копмилирование-загрузка класса-jspInit()-jspServis()-jspDestroy

sample.jsp
http://localhost:8081/sample.jsp?title
<%! Java Code %> - fields servlet

<%! private int accessCount=0; %>
<%= ++accessCount %> - количество обращений к странице с момента загрузки сервера

Скриплеты JSP - вставить любой код в метод service()
<%%>

Директивы JSP
-include - вставляет сервлет в текущий сервлет
-taglib - можно придумать свои теги, закрепить за ними логику и подтянуть свой тег

JSTL - java standart tag library


_________________________________
Начальные данные приложения
web.xml
<context-param> - в этих тегах указываются начальные данные

Cookie
-имена куки
-значения
-срока хранения
-домен, его создавший

куки хранятся на клиенте

Сессии
-хранится на сервере
jsessionid - ключ, идентификатор сессии

Статус коды.Фильтры.Аутентификация
_________________________________
100-500
200 ОК("ХОРОШО")
201 Created ("оздано")
204 No Content
301 Moved Permanently (перемещено навсегда)
302 Moved Temporarily (перемещено временно)
400 - что-то сломалось и нужно чинить, иначе пробовать бессмысленно
400 Bad request
401 Unauthrazed
403 Forbidden
404 Not Found
405 Method Not Allowed (не поддерживается) - url есть, но метода в нем нет
500 - Server error - предполагает retry (можно перезагрузить и все ок)
500 Iternal Server Error
502 Bad Gateway
503 Service 
504 Gateway timeout

Фильтры 
- почти как сервлет
javax.servlet.Filter
Методы
-void init
-void destroy
-void DiFilter

Basic Authentication
base64 - coding


JS
____________
функциональный язык программирования
77=='77' - true
77==='77' - false
always use ===

NPM - Maven
с помощью require осуществляется подгрузка модулей


https://habr.com/ru/company/oleg-bunin/blog/354824/
Тема
JS фишки
mindmap - идеи
Модель данных во вторник!!!

username: dz-itacademy
пароль: 9bDSCTfr874LlXUshIts



Трехуровневая архитектура
_______________________
каждый модуль - отдельный проект в eclipse
валидация лучше в клиенте





